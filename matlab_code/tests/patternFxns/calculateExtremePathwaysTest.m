classdef calculateExtremePathwaysTest < matlab.unittest.TestCase

    methods (Test)
        function testCalculateExtremePathwaysOrdBiBiInhib(testCase)
            Selem = [1     1     0     0     0    -1; ...
                     -1     0     1     0     0     0; ...
                      0    -1     0     0     0     0; ...
                      0     0    -1     1     0     0; ...
                      0     0     0    -1     1     0; ...
                      0     0     0     0    -1     1];
            [extremePath] = calculateExtremePathways(Selem);
            
            trueResExtremePath = [1; 0; 1; 1; 1; 1];
   
            testCase.verifyEqual(extremePath, trueResExtremePath);            
            
        end
        
        function testCalculateExtremePathwaysOrdBiBi(testCase)
            Selem = [1     0     0     0    -1; ...
                    -1     1     0     0     0; ...
                     0    -1     1     0     0; ...
                     0     0    -1     1     0; ...
                     0     0     0    -1     1];
                 
            [extremePath] = calculateExtremePathways(Selem);
            
            trueResExtremePath = [1; 1; 1; 1; 1];
   
            testCase.verifyEqual(extremePath, trueResExtremePath);            
            
        end
        
         function testCalculateExtremePathwaysOrdBiBiInhibPromiscuous(testCase)
            Selem = [1     0     0     0     0    -1     1     0     0     0     0    -1; ...
                    -1     1     1     0     0     0     0     0     0     0     0     0; ...
                     0    -1     0     0     0     0     0     0     0     0     0     0; ...
                     0     0    -1     1     0     0     0     0     0     0     0     0; ...
                     0     0     0    -1     1     0     0     0     0     0     0     0; ...
                     0     0     0     0    -1     1     0     0     0     0     0     0; ...
                     0     0     0     0     0     0    -1     1     1     0     0     0; ...
                     0     0     0     0     0     0     0    -1     0     0     0     0; ...
                     0     0     0     0     0     0     0     0    -1     1     0     0; ...
                     0     0     0     0     0     0     0     0     0    -1     1     0; ...
                     0     0     0     0     0     0     0     0     0     0    -1     1];
            [extremePath] = calculateExtremePathways(Selem);
            
            trueResExtremePath = [ 1     0;...
                                   0     0;...
                                   1     0;...
                                   1     0;...
                                   1     0;...
                                   1     0;...
                                   0     1;...
                                   0     0;...
                                   0     1;...
                                   0     1;...
                                   0     1;...
                                   0     1];
   
            testCase.verifyEqual(extremePath, trueResExtremePath);            
            
         end
         function testCalculateExtremePathwaysRandom1(testCase)
            
            Selem = [1     1     0     0     0     0     0    -1    -1; ...
                    -1     0     1     0     0     0     0     0     0; ...
                     0    -1     0     1     0     0     0     0     0; ...
                     0     0    -1    -1     1     0     0     0     0; ...
                     0     0     0     0    -1     1     1     0     0; ...
                     0     0     0     0     0    -1     0     1     0; ...
                     0     0     0     0     0     0    -1     0     1];
            
            [extremePath] = calculateExtremePathways(Selem);
            
            trueResExtremePath = [1     0     1     0; ...
                                  0     1     0     1; ...
                                  1     0     1     0; ...
                                  0     1     0     1; ...
                                  1     1     1     1; ...
                                  1     1     0     0; ...
                                  0     0     1     1; ...
                                  1     1     0     0; ...
                                  0     0     1     1];
   
            testCase.verifyEqual(extremePath, trueResExtremePath);            
            
        end
        function testCalculateExtremePathwaysRandom2(testCase)
            
            Selem = [1     0     1     0     0     0    -1     0    -1; ...
                     -1     1     0     0     0     0     0     0     0; ...
                      0    -1     0    -1     1     0     0     0     0; ...
                      0     0    -1     1     0     0     0     0     0; ...
                      0     0     0     0    -1     1     0     1     0; ...
                      0     0     0     0     0    -1     1     0     0; ...
                      0     0     0     0     0     0     0    -1     1];
            
            [extremePath] = calculateExtremePathways(Selem);
                  
            % current result, which is wrong
            trueResExtremePath = [1     0; ...
                                  1     0; ...
                                  0     1; ...
                                  0     1; ...
                                  1     1; ...
                                  0     0; ...
                                  0     0; ...
                                  1     1; ...
                                  1     1];
   
            testCase.verifyEqual(extremePath, []);            
            
        end
        
    end
end

